:-module(maze_generator_configuration, [directions/1
                                       ,maze_generation/1
                                       ,path_origins/1
                                       ,targets/1
                                       ]).

/** <module> Maze generator options.

*/

%!      directions(?Determinism) is semidet.
%
%       How to choose the directions to place the next floor tiles.
%
%       Determines the way that the next cell to be turned into a floor
%       tile is decided by generator_loop/6. Options are therefore
%       passed to generate_observation/2. See that predicate for
%       explanation of the different options.
%
%       Known options:
%       * random
%       * nondet
%       * random_nondet
%       * constant
%
%directions(random).
%directions(nondet).
directions(random_nondet).
%directions(constant).


%!      maze_generation(?Style) is semidet.
%
%       Style of maze generation.
%
%       Known Style values:
%       * sparse_orthogonal: maps are generated by ensuring that every
%         new floor tile has adequate wall padding on all directions,
%         other than the direction of entry to that tile. The results is
%         a sparse map, where not all locations are accessible and there
%         are "clumps" of wall tiles. Walls are always connected to each
%         other or an edge, and intersecting walls are always in right
%         angles to each other. Floor tiles can always be accessed from
%         other all tiles by moving in four directions, without
%         diagonals.
%       * sparse_diagonal: maps are generated by ensuring that they
%         contain no floor plazas or loops. The result is a map more
%         sparse than with the sparse_orthogonal Style, where walls are
%         still connected to each other and the edges, but two wall
%         tiles may only touch corners, not necessarily their sides.
%         There is still an unbroken path of floor tiles running through
%         the maze.
%
maze_generation(sparse_orthogonal).
%maze_generation(sparse_diagonal).


%!      path_origins(?Determinism) is semidet.
%
%       How to choose the starting locations for path generation.
%
%       Passed to starting_location/3. See that predicate for option
%       explanations.
%
%       Known Determinism options:
%       * random
%       * random_nondet
%       * nondet
%       * edge_random
%       * edge_nondet
%       * top_edge
%       * right_edge
%       * bottom_edge
%       * left_edge
%
%       @tbd This doesn't make a difference at the top-level of mage/2
%       because generation is re-attempted from each passable tile
%       so-far exhaustively. It makes more of a difference if
%       generator_loop/6 is called with one of thse options instead.
%
%       @tbd Actually, there is a small difference: some options seem to
%       cause failure of the generation. The default ish option of
%       edge_random seems to be safe enough in that respect.
%
%path_origins(random).
%path_origins(random_nondet).
%path_origins(nondet).
path_origins(edge_random).
%path_origins(edge_nondet).
%path_origins(top_edge).
%path_origins(right_edge).
%path_origins(bottom_edge).
%path_origins(left_edge).


%!      targets(?Targets) is semidet.
%
%       How Targets should be placed in a maze map.
%
%       Targets refer to the start and exit tile, or tiles. The value of
%       Targets determines how those are selected. Currently, the only
%       known option is 'random', that will place exactly one start and
%       exactly one exit tile in a random location on the map, ensuring
%       that the two do not coincide.
%
%targets(none).
%targets(random). % May cause failure.
targets(random_nondet).
%targets(nondet).
%targets(edge_random).
%targets(edge_nondet).
%targets(top_edge).
%targets(right_edge).
%targets(bottom_edge).
%targets(left_edge).
