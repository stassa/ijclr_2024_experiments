:-module(grid_master_configuration, [action_representation/1
                                    ,display_engine/1
                                    ,maps_module/1
                                    ,map_file/1
                                    ,passable/1
                                    ,primitives_file/2
                                    ,test_primitives_file/2
                                    ,theme/1
                                    ,tile/4
                                    ,tile_alias/2
                                    ]).

/** <module> Configuration options for Grid Master.

TODO: copied from fsc_mazes and other sources. Ensure stand-alone.

*/
:-dynamic action_representation/1
         ,primitives_file/2
         ,theme/1.


%!      action_representation(?Representation) is semidet.
%
%       Whether the state vector will have an action-stack or not.
%
%       Currently known representations:
%       * stack_based: the state vector has an action stack where action
%       tokens are pushed to each time an action is taken.
%       * memoryless: the state vector has no action stack.
%
%action_representation(stack_less).
action_representation(stack_based).
%action_representation(lookaround).
%action_representation(controller_sequences).
%action_representation(list_based).


%!      display_engine(?Engine) is semidet.
%
%       The display Engine to use in map_display.
%
%       @tbd Not currently used.
%
display_engine(prolog).
%display_engine(python).


%!      maps_module(?Module) is semidet.
%
%       Name of the module storing map/3 terms.
%
maps_module(maps).


%!      map_file(?Path) is semidet.
%
%       Path loading generated maze maps.
%
%       Path should be the path to a Prolog file with load directives
%       for the mazes generated by James' map generator (or any other
%       generator we end up using).
%
%       That file is loaded to import the generated maps into the
%       move_generator module, from where they are combined with
%       primitive moves and written to a new file, defined in
%       primitives_file/1.
%
map_file(grid_master_data(maps/'zero.map')).
map_file(grid_master_data(maps/'tessera_1.map')).
map_file(grid_master_data(maps/'tessera_2.map')).
map_file(grid_master_data(maps/'tessera_3.map')).
map_file(grid_master_data(maps/'tessera_4.map')).
map_file(grid_master_data(maps/'test_1.map')).
map_file(grid_master_data(maps/'room.map')).
map_file(grid_master_data(maps/'big_room.map')).
% Observation matrices.
%map_file(grid_master_data(maps/'pge_1.map')).
%map_file(grid_master_data(maps/'pge_2.map')).
%map_file(grid_master_data(maps/'pge_3.map')).
%map_file(grid_master_data(maps/'pge_4.map')).
%map_file(grid_master_data(maps/'pge_5.map')).
%map_file(grid_master_data(maps/'pge_6.map')).
%map_file(grid_master_data(maps/'pge_7.map')).
%map_file(grid_master_data(maps/'pge_8.map')).
%map_file(grid_master_data(maps/'pge_9.map')).
%map_file(grid_master_data(maps/'pge_10.map')).
%map_file(grid_master_data(maps/'pge_11.map')).
%map_file(grid_master_data(maps/'pge_12.map')).
%map_file(grid_master_data(maps/'pge_13.map')).
%map_file(grid_master_data(maps/'pge_14.map')).
%map_file(grid_master_data(maps/'pge_15.map')).
%map_file(grid_master_data(maps/'mage_map_1.map')).
% Hall maps for patrolling controllers.
map_file(grid_master_data(maps/'hall_a.map')).
map_file(grid_master_data(maps/'hall_a_small.map')).
% Dungeon maps
map_file(grid_master_data(dungeons/'dungeon_1.map')).
map_file(grid_master_data(dungeons/'dungeon_2.map')).
map_file(grid_master_data(dungeons/'dungeon_3.map')).
map_file(grid_master_data(dungeons/'dungeon_4.map')).
map_file(grid_master_data(dungeons/'dungeon_5.map')).
map_file(grid_master_data(dungeons/'dungeon_6.map')).
map_file(grid_master_data(dungeons/'dungeon_7.map')).
map_file(grid_master_data(dungeons/'dungeon_8.map')).
map_file(grid_master_data(dungeons/'dungeon_9.map')).
map_file(grid_master_data(dungeons/'dungeon_10.map')).
map_file(grid_master_data(dungeons/'dungeon_small.map')).
% MaGe maps 100 x 100
map_file(grid_master_data(mazes/'mage_1.map')).
map_file(grid_master_data(mazes/'mage_2.map')).
map_file(grid_master_data(mazes/'mage_3.map')).
map_file(grid_master_data(mazes/'mage_4.map')).
map_file(grid_master_data(mazes/'mage_5.map')).
map_file(grid_master_data(mazes/'mage_6.map')).
map_file(grid_master_data(mazes/'mage_7.map')).
map_file(grid_master_data(mazes/'mage_8.map')).
map_file(grid_master_data(mazes/'mage_9.map')).
map_file(grid_master_data(mazes/'mage_10.map')).
map_file(grid_master_data(mazes/'mage_11.map')).
map_file(grid_master_data(mazes/'mage_12.map')).
map_file(grid_master_data(mazes/'mage_13.map')).
map_file(grid_master_data(mazes/'mage_14.map')).
map_file(grid_master_data(mazes/'mage_15.map')).
map_file(grid_master_data(mazes/'mage_16.map')).
map_file(grid_master_data(mazes/'mage_17.map')).
map_file(grid_master_data(mazes/'mage_18.map')).
map_file(grid_master_data(mazes/'mage_19.map')).
map_file(grid_master_data(mazes/'mage_20.map')).
map_file(grid_master_data(mazes/'mage_21.map')).
map_file(grid_master_data(mazes/'mage_22.map')).
map_file(grid_master_data(mazes/'mage_23.map')).
map_file(grid_master_data(mazes/'mage_24.map')).
map_file(grid_master_data(mazes/'mage_25.map')).
map_file(grid_master_data(mazes/'mage_26.map')).
map_file(grid_master_data(mazes/'mage_27.map')).
map_file(grid_master_data(mazes/'mage_28.map')).
map_file(grid_master_data(mazes/'mage_29.map')).
map_file(grid_master_data(mazes/'mage_30.map')).
map_file(grid_master_data(mazes/'mage_31.map')).
map_file(grid_master_data(mazes/'mage_32.map')).
map_file(grid_master_data(mazes/'mage_33.map')).
map_file(grid_master_data(mazes/'mage_34.map')).
map_file(grid_master_data(mazes/'mage_35.map')).
map_file(grid_master_data(mazes/'mage_36.map')).
map_file(grid_master_data(mazes/'mage_37.map')).
map_file(grid_master_data(mazes/'mage_38.map')).
map_file(grid_master_data(mazes/'mage_39.map')).
map_file(grid_master_data(mazes/'mage_40.map')).
map_file(grid_master_data(mazes/'mage_41.map')).
map_file(grid_master_data(mazes/'mage_42.map')).
map_file(grid_master_data(mazes/'mage_43.map')).
map_file(grid_master_data(mazes/'mage_44.map')).
map_file(grid_master_data(mazes/'mage_45.map')).
map_file(grid_master_data(mazes/'mage_46.map')).
map_file(grid_master_data(mazes/'mage_47.map')).
map_file(grid_master_data(mazes/'mage_48.map')).
map_file(grid_master_data(mazes/'mage_49.map')).
map_file(grid_master_data(mazes/'mage_50.map')).
map_file(grid_master_data(mazes/'mage_51.map')).
map_file(grid_master_data(mazes/'mage_52.map')).
map_file(grid_master_data(mazes/'mage_53.map')).
map_file(grid_master_data(mazes/'mage_54.map')).
map_file(grid_master_data(mazes/'mage_55.map')).
map_file(grid_master_data(mazes/'mage_56.map')).
map_file(grid_master_data(mazes/'mage_57.map')).
map_file(grid_master_data(mazes/'mage_58.map')).
map_file(grid_master_data(mazes/'mage_59.map')).
map_file(grid_master_data(mazes/'mage_60.map')).
map_file(grid_master_data(mazes/'mage_61.map')).
map_file(grid_master_data(mazes/'mage_62.map')).
map_file(grid_master_data(mazes/'mage_63.map')).
map_file(grid_master_data(mazes/'mage_64.map')).
map_file(grid_master_data(mazes/'mage_65.map')).
map_file(grid_master_data(mazes/'mage_66.map')).
map_file(grid_master_data(mazes/'mage_67.map')).
map_file(grid_master_data(mazes/'mage_68.map')).
map_file(grid_master_data(mazes/'mage_69.map')).
map_file(grid_master_data(mazes/'mage_70.map')).
map_file(grid_master_data(mazes/'mage_71.map')).
map_file(grid_master_data(mazes/'mage_72.map')).
map_file(grid_master_data(mazes/'mage_73.map')).
map_file(grid_master_data(mazes/'mage_74.map')).
map_file(grid_master_data(mazes/'mage_75.map')).
map_file(grid_master_data(mazes/'mage_76.map')).
map_file(grid_master_data(mazes/'mage_77.map')).
map_file(grid_master_data(mazes/'mage_78.map')).
map_file(grid_master_data(mazes/'mage_79.map')).
map_file(grid_master_data(mazes/'mage_80.map')).
map_file(grid_master_data(mazes/'mage_81.map')).
map_file(grid_master_data(mazes/'mage_82.map')).
map_file(grid_master_data(mazes/'mage_83.map')).
map_file(grid_master_data(mazes/'mage_84.map')).
map_file(grid_master_data(mazes/'mage_85.map')).
map_file(grid_master_data(mazes/'mage_86.map')).
map_file(grid_master_data(mazes/'mage_87.map')).
map_file(grid_master_data(mazes/'mage_88.map')).
map_file(grid_master_data(mazes/'mage_89.map')).
map_file(grid_master_data(mazes/'mage_90.map')).
map_file(grid_master_data(mazes/'mage_91.map')).
map_file(grid_master_data(mazes/'mage_92.map')).
map_file(grid_master_data(mazes/'mage_93.map')).
map_file(grid_master_data(mazes/'mage_94.map')).
map_file(grid_master_data(mazes/'mage_95.map')).
map_file(grid_master_data(mazes/'mage_96.map')).
map_file(grid_master_data(mazes/'mage_97.map')).
map_file(grid_master_data(mazes/'mage_98.map')).
map_file(grid_master_data(mazes/'mage_99.map')).
map_file(grid_master_data(mazes/'mage_100.map')).


%!      passable(?Symbol) is semidet.
%
%       Symbol of a passable tile in a map.
%
%       Passable tiles can be traversed by an agent. Other tiles,
%       cannot.
%
passable(f).
passable(s).
passable(e).
passable(u).
passable(r).
passable(d).
passable(l).
passable(x).
passable(@). % Traversing
passable(a). % Patrolling landmark A
passable(b). % Patrolling landmark B
passable(c). % Patrolling landmark C
passable(g). % Patrolling landmark D


%!      primitives_file(?Path,?Module) is semidet.
%
%       Path to the Prolog Module holding primitive moves and maze maps.
%
%primitives_file(grid_master_data('primitives.pl'),primitives).
%primitives_file(grid_master_data('primitives_stack_less.pl'),primitives).
primitives_file(grid_master_data('primitives_stack_based.pl'),primitives).
%primitives_file(grid_master_data('primitives_lookaround.pl'),primitives).
%primitives_file(grid_master_data('primitives_controller_sequences.pl'),primitives).
%primitives_file(grid_master_data('primitives_list_based.pl'),primitives).


%!      test_primitives_file(?Path,?Module) is semidet.
%
%       Path and Module name for a file with primitives for testing.
%
test_primitives_file(grid_master_data('test_primitives.pl'),primitives).


%!      theme(?Theme) is semidet.
%
%       Theme for map and path printing.
%
%       Known themes:
%
%       * text: prints map in coloured text characters.
%       * boxes: prints map in coloured box drawings.
%
%       Example of 'text' theme (without the colours):
%       ==
%       ?- map_display:theme(T).
%       T = text.
%
%       ?- trace_path(0).
%       ˅ w f f f f f
%       ˅ w w w f w w
%       ˃ ˃ ˅ w f f f
%       w w ˅ w w w f
%       f w ˃ ˃ ˃ ˃ ˅
%       f w w w w w ˅
%       f f f f f f e
%       true.
%       ==
%
%       % Example of 'boxes' theme (without the colours):
%       ==
%       ?- map_display:theme(T).
%       T = boxes.
%
%       ?- trace_path(0).
%       ▼ ■ □ □ □ □ □
%       ▼ ■ ■ ■ □ ■ ■
%       ► ► ▼ ■ □ □ □
%       ■ ■ ▼ ■ ■ ■ □
%       □ ■ ► ► ► ► ▼
%       □ ■ ■ ■ ■ ■ ▼
%       □ □ □ □ □ □ █
%       true.
%       ==
%
%theme(text).
theme(boxes).


%!      tile(?Token,?Theme,?Style,?Symbol) is semidet.
%
%       Mapping between tiles and their printing elements.
%
%       Token is the symbol of a tile, or a primitive move.
%
%       Theme is the atomic identifier of a printing theme, as defined
%       in theme/1.
%
%       Style is a list of attributes passed to the second
%       argument of ansi_format/3, that determines how Tile will be
%       printed by print_tile/4.
%
%       Symbol is the symbol to be printed. This allows arbitrary
%       mapping between the representation of map tiles and move
%       symbols, and printing characters.
%
tile(s,text,[fg(cyan)],s).
tile(f,text,[fg(green)],f).
tile(w,text,[fg(red)],w).
tile(e,text,[bold,fg(green)],e).
tile(@,text,[fg(yellow)],@).
tile(u,text,[fg(yellow)],˄).
tile(d,text,[fg(yellow)],˅).
tile(r,text,[fg(yellow)],˃).
tile(l,text,[fg(yellow)],˂).
tile(x,text,[fg('#808080')],x).
tile(a,text,[bold,fg(yellow)],'A'). % Patrolling landmark
tile(b,text,[bold,fg(yellow)],'B'). % Patrolling landmark
tile(c,text,[bold,fg(yellow)],'C'). % Patrolling landmark
tile(g,text,[bold,fg(yellow)],'D'). % Patrolling landmark
tile(?,text,[bold,fg('#808080')],.). % Patrolling middle area
% ASCII box drawings
tile(s,boxes,[fg(cyan)],'S').
tile(f,boxes,[fg(green)],□).
tile(w,boxes,[fg(red)],■).
tile(e,boxes,[bold,fg(green)],'E').
tile(@,boxes,[bold,fg(yellow)],@).
tile(u,boxes,[bold,fg(yellow)],▲).
tile(d,boxes,[bold,fg(yellow)],▼).
tile(r,boxes,[bold,fg(yellow)],►).
tile(l,boxes,[bold,fg(yellow)],◄).
tile(x,boxes,[bold,fg('#808080')],.).
tile(a,boxes,[bold,fg(yellow)],'A'). % Patrolling landmark
tile(b,boxes,[bold,fg(yellow)],'B'). % Patrolling landmark
tile(c,boxes,[bold,fg(yellow)],'C'). % Patrolling landmark
tile(g,boxes,[bold,fg(yellow)],'D'). % Patrolling landmark
tile(?,boxes,[bold,fg('#808080')],.). % Patrolling middle area
tile('X',boxes,[bold,fg(yellow)],'X').


%!      tile_alias(?Tile,?Alias) is semidet.
%
%       An Alias for a Tile.
%
%       Used to translate input maps to a desired notation. Only
%       applies when loading a map from a file.
%
tile_alias(#,w).
tile_alias(.,f).
%tile_alias(.,&).
